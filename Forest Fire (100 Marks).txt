Forest Fire (100 Marks)
You are camping in a forest area at night. You are living with the forest officers to experience their challenges and hardships to create a documentary on them. Everything was going well. Suddenly, a fire has broken out in the forest and it is expanding exponentially. There is a lot of chaos and cries of animals. It is going to take alot of time for the backup. Some of the posts in the forest have also caught fire. The officers are trying everything to safeguard the animals but the fire is spreading too fast. Amid such chaos, the petrol tankers of the officers have also caught fire. The fire is unstoppable now and the commanding officer is taking important decisions with his officers.


The officers know the energy levels of all the N animals in the forest at the moment. It is a tough decision for them as they can only save exactly X animals because of the current situation of the transports they have. Since, the animals are pride of the forest, the energy level of the animals are represented with P. All the animals with energy level equal to P or greater than P can board the available transports and they will be moved to a safer place. But since the capacity is for exactly X animals it is going to be tough to figure out.


Officer needs your help to figure out the minimum energy level P such that they can get exactly X animals to transport. If it is not possible to save exactly X animals, then you should respond with -1 so that they can think of some other plan. The officers are busy trying to get control of the fire and are counting on you to figure out the minimum P to save and transport exactly X animals. 

Example:

Number of animals, N = 5

Energy level of N animals = { 1, 3, 2, 4, 5 }

Current available capacity, X = 4

You should choose P = 2, so that exactly 4 animals with energy levels (2, 3, 4 and 5) can be saved as these have energies greater than or equal to P.

Input Format
The first line of input consists of two space-separated integers, N (number of animals) and X (available capacity for animals that can be transported).

The second line of input consists of N space-separated integers, representing the energy of all the animals.

Constraints
1<= N <=10^5

1<= X <=N

1<= arr[i] <=10^12

Arr[i] represents the energy level of the ith animal.

Output Format
Print the minimum energy level P such that exactly X animals can be saved or transported. If it is not possible to save exactly X animals, then print -1.

Sample TestCase 1
Input
5 4
1 3 2 4 5
Output
2

######################################################################################################################

SOLUTION :

The solution starts by sorting the array of animals' energy levels in ascending order.

A prefix sum array is then constructed from the sorted array. The prefix sum at any index i in this array represents the total energy of all animals up to index i.

A binary search operation is conducted to find the minimal energy level P such that exactly X animals can be saved. The binary search spans from the lowest energy level (1) to the highest energy level in the input array.

For each iteration in the binary search, the middle energy level mid is computed.

The code then calculates the number of animals whose energy level is greater than or equal to mid. This is done efficiently using the bisect function, which returns the position in the sorted array where mid can be placed to maintain the sorted order. All animals from this index idx onward have energy greater than or equal to mid.

If the count of animals with energy greater than or equal to mid equals X, then the mid value is a potential answer, and the binary search continues to look for possibly smaller mid values on the right of the sorted array.

If the count of animals with energy greater than or equal to mid is less than X, the binary search moves left to find a smaller mid value.

If the count of animals with energy greater than or equal to mid is greater than X, the program checks if the excess energy from the animals whose energy level is greater than mid can be used to save more animals. This is done by comparing the total excess energy with the product of the difference between X and count and mid.

If the excess energy is sufficient, the mid value is considered a potential answer and the binary search continues to the right side to find a potentially smaller mid value.

After all iterations in the binary search, the solution returns the smallest mid value that allowed exactly X animals to be saved. If no such mid was found, -1 is returned.

######################################################################################################################
code :

def solve_problem(n, x, arr):
    arr.sort()
    prefix_sum = [0] * (n + 1)
    for i in range(1, n + 1):
        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]

    left, right = 1, max(arr)
    ans = -1

    while left <= right:
        mid = left + ((right - left) // 2)
        idx = bisect.bisect_left(arr, mid)
        count = n - idx

        if count == x:
            ans = mid
            left = mid + 1
        elif count < x:
            right = mid - 1
        else:
            if (prefix_sum[-1] - prefix_sum[idx]) - mid * count <= (x - count) * mid:
                ans = mid
            left = mid + 1

    return ans


import bisect
n, x = map(int, input().strip().split())
arr = list(map(int, input().strip().split()))
print(solve_problem(n, x, arr))
